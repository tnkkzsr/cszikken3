
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COMMA DIV DO ELSE END EQ FOR FUNCTION GE GT IDENT IF INTERVAL LBRACKET LE LPAREN LT MINUS MULT NEQ NUMBER PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ RPAREN SEMICOLON THEN TO VAR WHILE WRITE\n    program : PROGRAM IDENT SEMICOLON outblock PERIOD\n    \n    outblock : var_decl_part subprog_decl_part outblock_act statement\n    \n    outblock_act :\n    \n    var_decl_part : var_decl_list SEMICOLON\n                  |\n    \n    var_decl_list : var_decl_list SEMICOLON var_decl\n                  | var_decl\n    \n    var_decl : VAR id_list\n    \n    subprog_decl_part : subprog_decl_list SEMICOLON\n                      |\n    \n    subprog_decl_list : subprog_decl_list SEMICOLON subprog_decl\n                      | subprog_decl\n        \n    subprog_decl : proc_decl\n    \n    proc_decl : PROCEDURE proc_name LPAREN proc_act2 RPAREN SEMICOLON inblock\n         | PROCEDURE proc_name LPAREN act_proc_args_set id_list act_proc_args_done RPAREN SEMICOLON inblock\n    \n    proc_act2 :\n    \n    act_proc_args_done :\n    \n    act_proc_args_set :\n    \n    proc_name : IDENT\n    \n    inblock : var_decl_part statement\n    statement_list : statement_list SEMICOLON statement\n                      | statementstatement : assignment_statement\n                | if_statement\n                | while_statement\n                | for_statement\n                | proc_call_statement\n                | null_statement\n                | block_statement\n                | read_statement\n                | write_statementassignment_statement : IDENT ASSIGN expressionact_assign_ident :if_statement : act_generate_labels IF condition act_insert_br THEN act_insert_label1 statement act_insert_jump3 act_insert_label2 else_statement act_insert_jump3 act_insert_label3act_generate_labels : act_insert_br :act_insert_label1 :act_insert_label2 :act_insert_label3 :act_insert_jump1 :act_insert_jump2 :act_insert_jump3 :else_statement : ELSE statement\n                     |while_statement : WHILE act_generate_labels act_insert_jump1 act_insert_label1 condition act_insert_br_while DO act_insert_label2 statement act_insert_jump1 act_insert_label3act_insert_br_while :for_statement : FOR act_generate_labels IDENT act_lookup_prev_ident ASSIGN expression act_assign_ident act_insert_jump1 act_insert_label1 TO expression act_insert_br_for act_insert_label2 DO statement act_increment_itr act_insert_jump1 act_insert_label3act_insert_br_for :act_increment_itr :for_act1 :arg_list : expression\n                | arg_list COMMA expressionproc_call_name : IDENTproc_call_statement : proc_call_name LPAREN RPAREN\n                           | proc_call_name LPAREN arg_list RPAREN\n                           \n    block_statement : BEGIN statement_list ENDact_lookup_prev_ident :\n    read_statement : READ LPAREN IDENT RPAREN\n    \n    write_statement : WRITE LPAREN expression RPAREN\n    null_statement :condition : expression EQ expression\n                 | expression NEQ expression\n                 | expression LT expression\n                 | expression LE expression\n                 | expression GT expression\n                 | expression GE expression\n    expression : term\n               | MINUS term\n               | expression PLUS term\n               | expression MINUS term\n    \n    term : factor\n         | term MULT factor\n         | term DIV factor\n    \n    factor : var_name\n           | number\n           | LPAREN expression RPAREN\n    \n    var_name : IDENT\n    \n    number : NUMBER\n    id_list : IDENT\n               | id_list COMMA IDENT'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,10,],[0,-1,]),'IDENT':([2,4,6,9,11,15,16,19,20,24,37,38,40,44,46,47,48,49,50,53,54,56,60,64,68,74,79,80,81,82,86,87,88,89,90,91,92,95,99,106,114,117,119,123,125,129,135,137,145,],[3,-5,-10,18,-3,22,-4,35,-9,45,-35,-35,35,-18,57,57,-40,69,57,75,57,18,57,57,-37,35,57,57,57,57,57,57,57,57,57,57,57,57,-5,-37,57,35,35,-5,-38,35,35,57,35,]),'SEMICOLON':([3,7,8,12,13,14,16,17,18,23,26,27,28,29,30,31,32,33,34,40,43,45,51,52,57,58,59,61,62,63,65,70,73,74,77,83,94,96,97,98,99,101,102,103,104,105,106,116,117,118,119,122,123,124,125,127,128,129,131,132,134,135,136,138,139,140,142,145,146,147,148,149,],[4,16,-7,20,-12,-13,-4,-8,-79,-6,-23,-24,-25,-26,-27,-28,-29,-30,-31,-60,-11,-80,74,-22,-77,-32,-67,-71,-74,-75,-78,-54,-56,-60,99,-68,-55,-21,-58,-59,-5,-69,-70,-72,-73,-76,-37,-14,-60,123,-60,-20,-5,-42,-38,-15,-38,-60,-44,-40,-42,-60,-39,-39,-43,-45,-34,-60,-49,-40,-39,-47,]),'PROCEDURE':([4,6,16,20,],[-5,15,-4,15,]),'WHILE':([4,6,11,16,19,20,40,74,99,106,117,119,123,125,129,135,145,],[-5,-10,-3,-4,37,-9,37,37,-5,-37,37,37,-5,-38,37,37,37,]),'FOR':([4,6,11,16,19,20,40,74,99,106,117,119,123,125,129,135,145,],[-5,-10,-3,-4,38,-9,38,38,-5,-37,38,38,-5,-38,38,38,38,]),'BEGIN':([4,6,11,16,19,20,40,74,99,106,117,119,123,125,129,135,145,],[-5,-10,-3,-4,40,-9,40,40,-5,-37,40,40,-5,-38,40,40,40,]),'READ':([4,6,11,16,19,20,40,74,99,106,117,119,123,125,129,135,145,],[-5,-10,-3,-4,41,-9,41,41,-5,-37,41,41,-5,-38,41,41,41,]),'WRITE':([4,6,11,16,19,20,40,74,99,106,117,119,123,125,129,135,145,],[-5,-10,-3,-4,42,-9,42,42,-5,-37,42,42,-5,-38,42,42,42,]),'IF':([4,6,11,16,19,20,36,40,74,99,106,117,119,123,125,129,135,145,],[-5,-10,-3,-4,-35,-9,47,-35,-35,-5,-37,-35,-35,-5,-38,-35,-35,-35,]),'PERIOD':([4,5,6,11,16,19,20,25,26,27,28,29,30,31,32,33,34,57,58,59,61,62,63,65,70,73,83,94,97,98,101,102,103,104,105,106,119,124,125,128,129,131,132,134,135,136,138,139,140,142,145,146,147,148,149,],[-5,10,-10,-3,-4,-60,-9,-2,-23,-24,-25,-26,-27,-28,-29,-30,-31,-77,-32,-67,-71,-74,-75,-78,-54,-56,-68,-55,-58,-59,-69,-70,-72,-73,-76,-37,-60,-42,-38,-38,-60,-44,-40,-42,-60,-39,-39,-43,-45,-34,-60,-49,-40,-39,-47,]),'VAR':([4,16,99,123,],[9,9,9,9,]),'COMMA':([17,18,45,57,59,61,62,63,65,71,72,78,83,101,102,103,104,105,115,],[24,-79,-80,-77,-67,-71,-74,-75,-78,95,-51,24,-68,-69,-70,-72,-73,-76,-52,]),'RPAREN':([18,44,45,50,55,57,59,61,62,63,65,71,72,75,76,78,83,84,100,101,102,103,104,105,115,],[-79,-16,-80,70,77,-77,-67,-71,-74,-75,-78,94,-51,97,98,-17,-68,105,118,-69,-70,-72,-73,-76,-52,]),'LPAREN':([21,22,35,37,39,41,42,46,47,48,50,54,60,64,68,79,80,81,82,86,87,88,89,90,91,92,95,114,137,],[44,-19,-53,-35,50,53,54,64,64,-40,64,64,64,64,-37,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'END':([26,27,28,29,30,31,32,33,34,40,51,52,57,58,59,61,62,63,65,70,73,74,83,94,96,97,98,101,102,103,104,105,106,119,124,125,128,129,131,132,134,135,136,138,139,140,142,145,146,147,148,149,],[-23,-24,-25,-26,-27,-28,-29,-30,-31,-60,73,-22,-77,-32,-67,-71,-74,-75,-78,-54,-56,-60,-68,-55,-21,-58,-59,-69,-70,-72,-73,-76,-37,-60,-42,-38,-38,-60,-44,-40,-42,-60,-39,-39,-43,-45,-34,-60,-49,-40,-39,-47,]),'ELSE':([26,27,28,29,30,31,32,33,34,57,58,59,61,62,63,65,70,73,83,94,97,98,101,102,103,104,105,106,119,124,125,128,129,131,132,134,135,136,138,139,140,142,145,146,147,148,149,],[-23,-24,-25,-26,-27,-28,-29,-30,-31,-77,-32,-67,-71,-74,-75,-78,-54,-56,-68,-55,-58,-59,-69,-70,-72,-73,-76,-37,-60,-42,-38,-38,-60,135,-40,-42,-60,-39,-39,-43,-45,-34,-60,-49,-40,-39,-47,]),'ASSIGN':([35,69,93,],[46,-57,114,]),'MINUS':([37,46,47,48,50,54,57,58,59,61,62,63,64,65,67,68,72,76,83,84,86,87,88,89,90,91,92,95,101,102,103,104,105,107,108,109,110,111,112,114,115,121,137,141,],[-35,60,60,-40,60,60,-77,80,-67,-71,-74,-75,60,-78,80,-37,80,80,-68,80,60,60,60,60,60,60,60,60,-69,-70,-72,-73,-76,80,80,80,80,80,80,60,80,80,60,80,]),'NUMBER':([37,46,47,48,50,54,60,64,68,79,80,81,82,86,87,88,89,90,91,92,95,114,137,],[-35,65,65,-40,65,65,65,65,-37,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'MULT':([57,59,61,62,63,65,83,101,102,103,104,105,],[-77,81,-71,-74,-75,-78,81,81,81,-72,-73,-76,]),'DIV':([57,59,61,62,63,65,83,101,102,103,104,105,],[-77,82,-71,-74,-75,-78,82,82,82,-72,-73,-76,]),'PLUS':([57,58,59,61,62,63,65,67,72,76,83,84,101,102,103,104,105,107,108,109,110,111,112,115,121,141,],[-77,79,-67,-71,-74,-75,-78,79,79,79,-68,79,-69,-70,-72,-73,-76,79,79,79,79,79,79,79,79,79,]),'EQ':([57,59,61,62,63,65,67,83,101,102,103,104,105,],[-77,-67,-71,-74,-75,-78,86,-68,-69,-70,-72,-73,-76,]),'NEQ':([57,59,61,62,63,65,67,83,101,102,103,104,105,],[-77,-67,-71,-74,-75,-78,87,-68,-69,-70,-72,-73,-76,]),'LT':([57,59,61,62,63,65,67,83,101,102,103,104,105,],[-77,-67,-71,-74,-75,-78,88,-68,-69,-70,-72,-73,-76,]),'LE':([57,59,61,62,63,65,67,83,101,102,103,104,105,],[-77,-67,-71,-74,-75,-78,89,-68,-69,-70,-72,-73,-76,]),'GT':([57,59,61,62,63,65,67,83,101,102,103,104,105,],[-77,-67,-71,-74,-75,-78,90,-68,-69,-70,-72,-73,-76,]),'GE':([57,59,61,62,63,65,67,83,101,102,103,104,105,],[-77,-67,-71,-74,-75,-78,91,-68,-69,-70,-72,-73,-76,]),'THEN':([57,59,61,62,63,65,66,83,85,101,102,103,104,105,107,108,109,110,111,112,],[-77,-67,-71,-74,-75,-78,-36,-68,106,-69,-70,-72,-73,-76,-61,-62,-63,-64,-65,-66,]),'DO':([57,59,61,62,63,65,83,101,102,103,104,105,107,108,109,110,111,112,113,120,141,143,144,],[-77,-67,-71,-74,-75,-78,-68,-69,-70,-72,-73,-76,-61,-62,-63,-64,-65,-66,-46,125,-48,-38,145,]),'TO':([57,59,61,62,63,65,83,101,102,103,104,105,121,126,130,133,],[-77,-67,-71,-74,-75,-78,-68,-69,-70,-72,-73,-76,-33,-40,-37,137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'outblock':([4,],[5,]),'var_decl_part':([4,99,123,],[6,117,117,]),'var_decl_list':([4,99,123,],[7,7,7,]),'var_decl':([4,16,99,123,],[8,23,8,8,]),'subprog_decl_part':([6,],[11,]),'subprog_decl_list':([6,],[12,]),'subprog_decl':([6,20,],[13,43,]),'proc_decl':([6,20,],[14,14,]),'id_list':([9,56,],[17,78,]),'outblock_act':([11,],[19,]),'proc_name':([15,],[21,]),'statement':([19,40,74,117,119,129,135,145,],[25,52,96,122,124,132,139,146,]),'assignment_statement':([19,40,74,117,119,129,135,145,],[26,26,26,26,26,26,26,26,]),'if_statement':([19,40,74,117,119,129,135,145,],[27,27,27,27,27,27,27,27,]),'while_statement':([19,40,74,117,119,129,135,145,],[28,28,28,28,28,28,28,28,]),'for_statement':([19,40,74,117,119,129,135,145,],[29,29,29,29,29,29,29,29,]),'proc_call_statement':([19,40,74,117,119,129,135,145,],[30,30,30,30,30,30,30,30,]),'null_statement':([19,40,74,117,119,129,135,145,],[31,31,31,31,31,31,31,31,]),'block_statement':([19,40,74,117,119,129,135,145,],[32,32,32,32,32,32,32,32,]),'read_statement':([19,40,74,117,119,129,135,145,],[33,33,33,33,33,33,33,33,]),'write_statement':([19,40,74,117,119,129,135,145,],[34,34,34,34,34,34,34,34,]),'act_generate_labels':([19,37,38,40,74,117,119,129,135,145,],[36,48,49,36,36,36,36,36,36,36,]),'proc_call_name':([19,40,74,117,119,129,135,145,],[39,39,39,39,39,39,39,39,]),'statement_list':([40,],[51,]),'proc_act2':([44,],[55,]),'act_proc_args_set':([44,],[56,]),'expression':([46,47,50,54,64,86,87,88,89,90,91,92,95,114,137,],[58,67,72,76,84,107,108,109,110,111,112,67,115,121,141,]),'term':([46,47,50,54,60,64,79,80,86,87,88,89,90,91,92,95,114,137,],[59,59,59,59,83,59,101,102,59,59,59,59,59,59,59,59,59,59,]),'factor':([46,47,50,54,60,64,79,80,81,82,86,87,88,89,90,91,92,95,114,137,],[61,61,61,61,61,61,61,61,103,104,61,61,61,61,61,61,61,61,61,61,]),'var_name':([46,47,50,54,60,64,79,80,81,82,86,87,88,89,90,91,92,95,114,137,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'number':([46,47,50,54,60,64,79,80,81,82,86,87,88,89,90,91,92,95,114,137,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'condition':([47,92,],[66,113,]),'act_insert_jump1':([48,126,132,147,],[68,130,136,148,]),'arg_list':([50,],[71,]),'act_insert_br':([66,],[85,]),'act_insert_label1':([68,106,130,],[92,119,133,]),'act_lookup_prev_ident':([69,],[93,]),'act_proc_args_done':([78,],[100,]),'inblock':([99,123,],[116,127,]),'act_insert_br_while':([113,],[120,]),'act_assign_ident':([121,],[126,]),'act_insert_jump3':([124,134,],[128,138,]),'act_insert_label2':([125,128,143,],[129,131,144,]),'else_statement':([131,],[134,]),'act_insert_label3':([136,138,148,],[140,142,149,]),'act_insert_br_for':([141,],[143,]),'act_increment_itr':([146,],[147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENT SEMICOLON outblock PERIOD','program',5,'p_program','compiler.py',126),
  ('outblock -> var_decl_part subprog_decl_part outblock_act statement','outblock',4,'p_outblock','compiler.py',150),
  ('outblock_act -> <empty>','outblock_act',0,'p_outblock_act','compiler.py',159),
  ('var_decl_part -> var_decl_list SEMICOLON','var_decl_part',2,'p_var_decl_part','compiler.py',167),
  ('var_decl_part -> <empty>','var_decl_part',0,'p_var_decl_part','compiler.py',168),
  ('var_decl_list -> var_decl_list SEMICOLON var_decl','var_decl_list',3,'p_var_decl_list','compiler.py',172),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','compiler.py',173),
  ('var_decl -> VAR id_list','var_decl',2,'p_var_decl','compiler.py',177),
  ('subprog_decl_part -> subprog_decl_list SEMICOLON','subprog_decl_part',2,'p_subprog_decl_part','compiler.py',182),
  ('subprog_decl_part -> <empty>','subprog_decl_part',0,'p_subprog_decl_part','compiler.py',183),
  ('subprog_decl_list -> subprog_decl_list SEMICOLON subprog_decl','subprog_decl_list',3,'p_subprog_decl_list','compiler.py',187),
  ('subprog_decl_list -> subprog_decl','subprog_decl_list',1,'p_subprog_decl_list','compiler.py',188),
  ('subprog_decl -> proc_decl','subprog_decl',1,'p_subprog_decl','compiler.py',193),
  ('proc_decl -> PROCEDURE proc_name LPAREN proc_act2 RPAREN SEMICOLON inblock','proc_decl',7,'p_proc_decl','compiler.py',198),
  ('proc_decl -> PROCEDURE proc_name LPAREN act_proc_args_set id_list act_proc_args_done RPAREN SEMICOLON inblock','proc_decl',9,'p_proc_decl','compiler.py',199),
  ('proc_act2 -> <empty>','proc_act2',0,'p_proc_act2','compiler.py',208),
  ('act_proc_args_done -> <empty>','act_proc_args_done',0,'p_act_proc_args_done','compiler.py',215),
  ('act_proc_args_set -> <empty>','act_proc_args_set',0,'p_act_proc_args_set','compiler.py',229),
  ('proc_name -> IDENT','proc_name',1,'p_proc_name','compiler.py',237),
  ('inblock -> var_decl_part statement','inblock',2,'p_inblock','compiler.py',248),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','compiler.py',255),
  ('statement_list -> statement','statement_list',1,'p_statement_list','compiler.py',256),
  ('statement -> assignment_statement','statement',1,'p_statement','compiler.py',259),
  ('statement -> if_statement','statement',1,'p_statement','compiler.py',260),
  ('statement -> while_statement','statement',1,'p_statement','compiler.py',261),
  ('statement -> for_statement','statement',1,'p_statement','compiler.py',262),
  ('statement -> proc_call_statement','statement',1,'p_statement','compiler.py',263),
  ('statement -> null_statement','statement',1,'p_statement','compiler.py',264),
  ('statement -> block_statement','statement',1,'p_statement','compiler.py',265),
  ('statement -> read_statement','statement',1,'p_statement','compiler.py',266),
  ('statement -> write_statement','statement',1,'p_statement','compiler.py',267),
  ('assignment_statement -> IDENT ASSIGN expression','assignment_statement',3,'p_assignment_statement','compiler.py',270),
  ('act_assign_ident -> <empty>','act_assign_ident',0,'p_act_assign_ident','compiler.py',282),
  ('if_statement -> act_generate_labels IF condition act_insert_br THEN act_insert_label1 statement act_insert_jump3 act_insert_label2 else_statement act_insert_jump3 act_insert_label3','if_statement',12,'p_if_statement','compiler.py',288),
  ('act_generate_labels -> <empty>','act_generate_labels',0,'p_act_generate_labels','compiler.py',291),
  ('act_insert_br -> <empty>','act_insert_br',0,'p_act_insert_br','compiler.py',300),
  ('act_insert_label1 -> <empty>','act_insert_label1',0,'p_act_insert_label1','compiler.py',305),
  ('act_insert_label2 -> <empty>','act_insert_label2',0,'p_act_insert_label2','compiler.py',311),
  ('act_insert_label3 -> <empty>','act_insert_label3',0,'p_act_insert_label3','compiler.py',317),
  ('act_insert_jump1 -> <empty>','act_insert_jump1',0,'p_act_insert_jump1','compiler.py',324),
  ('act_insert_jump2 -> <empty>','act_insert_jump2',0,'p_act_insert_jump2','compiler.py',330),
  ('act_insert_jump3 -> <empty>','act_insert_jump3',0,'p_act_insert_jump3','compiler.py',336),
  ('else_statement -> ELSE statement','else_statement',2,'p_else_statement','compiler.py',345),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','compiler.py',346),
  ('while_statement -> WHILE act_generate_labels act_insert_jump1 act_insert_label1 condition act_insert_br_while DO act_insert_label2 statement act_insert_jump1 act_insert_label3','while_statement',11,'p_while_statement','compiler.py',350),
  ('act_insert_br_while -> <empty>','act_insert_br_while',0,'p_act_insert_br_while','compiler.py',353),
  ('for_statement -> FOR act_generate_labels IDENT act_lookup_prev_ident ASSIGN expression act_assign_ident act_insert_jump1 act_insert_label1 TO expression act_insert_br_for act_insert_label2 DO statement act_increment_itr act_insert_jump1 act_insert_label3','for_statement',18,'p_for_statement','compiler.py',360),
  ('act_insert_br_for -> <empty>','act_insert_br_for',0,'p_act_insert_br_for','compiler.py',363),
  ('act_increment_itr -> <empty>','act_increment_itr',0,'p_act_increment_itr','compiler.py',375),
  ('for_act1 -> <empty>','for_act1',0,'p_for_act1','compiler.py',384),
  ('arg_list -> expression','arg_list',1,'p_arg_list','compiler.py',388),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','compiler.py',389),
  ('proc_call_name -> IDENT','proc_call_name',1,'p_proc_call_name','compiler.py',420),
  ('proc_call_statement -> proc_call_name LPAREN RPAREN','proc_call_statement',3,'p_proc_call_statement','compiler.py',425),
  ('proc_call_statement -> proc_call_name LPAREN arg_list RPAREN','proc_call_statement',4,'p_proc_call_statement','compiler.py',426),
  ('block_statement -> BEGIN statement_list END','block_statement',3,'p_block_statement','compiler.py',437),
  ('act_lookup_prev_ident -> <empty>','act_lookup_prev_ident',0,'p_act_lookup_prev_ident','compiler.py',440),
  ('read_statement -> READ LPAREN IDENT RPAREN','read_statement',4,'p_read_statement','compiler.py',450),
  ('write_statement -> WRITE LPAREN expression RPAREN','write_statement',4,'p_write_statement','compiler.py',467),
  ('null_statement -> <empty>','null_statement',0,'p_null_statement','compiler.py',475),
  ('condition -> expression EQ expression','condition',3,'p_condition','compiler.py',478),
  ('condition -> expression NEQ expression','condition',3,'p_condition','compiler.py',479),
  ('condition -> expression LT expression','condition',3,'p_condition','compiler.py',480),
  ('condition -> expression LE expression','condition',3,'p_condition','compiler.py',481),
  ('condition -> expression GT expression','condition',3,'p_condition','compiler.py',482),
  ('condition -> expression GE expression','condition',3,'p_condition','compiler.py',483),
  ('expression -> term','expression',1,'p_expression','compiler.py',491),
  ('expression -> MINUS term','expression',2,'p_expression','compiler.py',492),
  ('expression -> expression PLUS term','expression',3,'p_expression','compiler.py',493),
  ('expression -> expression MINUS term','expression',3,'p_expression','compiler.py',494),
  ('term -> factor','term',1,'p_term','compiler.py',520),
  ('term -> term MULT factor','term',3,'p_term','compiler.py',521),
  ('term -> term DIV factor','term',3,'p_term','compiler.py',522),
  ('factor -> var_name','factor',1,'p_factor','compiler.py',544),
  ('factor -> number','factor',1,'p_factor','compiler.py',545),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','compiler.py',546),
  ('var_name -> IDENT','var_name',1,'p_var_name','compiler.py',555),
  ('number -> NUMBER','number',1,'p_number','compiler.py',582),
  ('id_list -> IDENT','id_list',1,'p_id_list','compiler.py',587),
  ('id_list -> id_list COMMA IDENT','id_list',3,'p_id_list','compiler.py',588),
]
