
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COMMA DIV DO ELSE END EQ FOR FUNCTION GE GT IDENT IF INTERVAL LBRACKET LE LPAREN LT MINUS MULT NEQ NUMBER PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ RPAREN SEMICOLON THEN TO VAR WHILE WRITE\n    program : PROGRAM IDENT SEMICOLON outblock PERIOD\n    \n    outblock : var_decl_part subprog_decl_part outblock_act statement\n    \n    outblock_act :\n    \n    var_decl_part : var_decl_list SEMICOLON\n                  |\n    \n    var_decl_list : var_decl_list SEMICOLON var_decl\n                  | var_decl\n    \n    var_decl : VAR id_list\n    \n    subprog_decl_part : subprog_decl_list SEMICOLON\n                      |\n    \n    subprog_decl_list : subprog_decl_list SEMICOLON subprog_decl\n                      | subprog_decl\n        \n    subprog_decl : proc_decl\n    \n    proc_decl : PROCEDURE proc_name LPAREN RPAREN SEMICOLON inblock\n    \n    proc_name : IDENT\n    \n    inblock : var_decl_part statement\n    statement_list : statement_list SEMICOLON statement\n                      | statementstatement : assignment_statement\n                | if_statement\n                | while_statement\n                | for_statement\n                | proc_call_statement\n                | null_statement\n                | block_statement\n                | read_statement\n                | write_statementassignment_statement : IDENT ASSIGN expressionif_statement : act_generate_labels IF condition THEN act_insert_br act_insert_label1 statement act_insert_jump1 act_insert_label2 else_statement act_insert_jump2 act_insert_label3act_generate_labels :act_insert_br :act_insert_label1 :act_insert_label2 :act_insert_label3 :act_insert_jump1 :act_insert_jump2 :else_statement : ELSE statement\n                     |while_statement : WHILE condition DO statementfor_statement : FOR IDENT ASSIGN expression for_act1 TO expression DO statementfor_act1 :proc_call_statement : proc_call_name LPAREN RPARENproc_call_name : IDENTblock_statement : BEGIN statement_list END\n    read_statement : READ LPAREN IDENT RPAREN\n    \n    write_statement : WRITE LPAREN expression RPAREN\n    null_statement :condition : expression EQ expression\n                 | expression NEQ expression\n                 | expression LT expression\n                 | expression LE expression\n                 | expression GT expression\n                 | expression GE expression\n    expression : term\n               | MINUS term\n               | expression PLUS term\n               | expression MINUS term\n    \n    term : factor\n         | term MULT factor\n         | term DIV factor\n    \n    factor : var_name\n           | number\n           | LPAREN expression RPAREN\n    \n    var_name : IDENT\n    \n    number : NUMBER\n    id_list : IDENT\n               | id_list COMMA IDENT'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,10,],[0,-1,]),'IDENT':([2,4,6,9,11,15,16,19,20,24,37,38,40,46,47,51,55,62,63,67,68,69,70,71,72,73,74,75,76,77,80,83,86,87,105,106,109,110,114,118,],[3,-5,-10,18,-3,22,-4,35,-9,45,56,58,35,56,56,56,56,84,56,35,56,56,56,56,56,56,56,56,56,56,56,35,-5,-31,35,-32,35,56,35,35,]),'SEMICOLON':([3,7,8,12,13,14,16,17,18,23,26,27,28,29,30,31,32,33,34,40,43,45,50,52,53,54,56,57,60,61,64,65,67,78,81,82,83,86,87,88,95,96,97,98,99,101,102,103,104,105,106,108,109,111,113,114,115,116,117,118,119,120,121,],[4,16,-7,20,-12,-13,-4,-8,-66,-6,-19,-20,-21,-22,-23,-24,-25,-26,-27,-47,-11,-67,-54,-58,-61,-62,-64,-65,83,-18,86,-28,-47,-55,-42,-44,-47,-5,-31,-39,-56,-57,-59,-60,-63,-17,-45,-46,-14,-47,-32,-16,-47,-35,-33,-47,-38,-40,-36,-47,-34,-37,-29,]),'PROCEDURE':([4,6,16,20,],[-5,15,-4,15,]),'WHILE':([4,6,11,16,19,20,40,67,83,86,87,105,106,109,114,118,],[-5,-10,-3,-4,37,-9,37,37,37,-5,-31,37,-32,37,37,37,]),'FOR':([4,6,11,16,19,20,40,67,83,86,87,105,106,109,114,118,],[-5,-10,-3,-4,38,-9,38,38,38,-5,-31,38,-32,38,38,38,]),'BEGIN':([4,6,11,16,19,20,40,67,83,86,87,105,106,109,114,118,],[-5,-10,-3,-4,40,-9,40,40,40,-5,-31,40,-32,40,40,40,]),'READ':([4,6,11,16,19,20,40,67,83,86,87,105,106,109,114,118,],[-5,-10,-3,-4,41,-9,41,41,41,-5,-31,41,-32,41,41,41,]),'WRITE':([4,6,11,16,19,20,40,67,83,86,87,105,106,109,114,118,],[-5,-10,-3,-4,42,-9,42,42,42,-5,-31,42,-32,42,42,42,]),'IF':([4,6,11,16,19,20,36,40,67,83,86,87,105,106,109,114,118,],[-5,-10,-3,-4,-30,-9,47,-30,-30,-30,-5,-31,-30,-32,-30,-30,-30,]),'PERIOD':([4,5,6,11,16,19,20,25,26,27,28,29,30,31,32,33,34,50,52,53,54,56,57,65,67,78,81,82,87,88,95,96,97,98,99,102,103,106,109,111,113,114,115,116,117,118,119,120,121,],[-5,10,-10,-3,-4,-47,-9,-2,-19,-20,-21,-22,-23,-24,-25,-26,-27,-54,-58,-61,-62,-64,-65,-28,-47,-55,-42,-44,-31,-39,-56,-57,-59,-60,-63,-45,-46,-32,-47,-35,-33,-47,-38,-40,-36,-47,-34,-37,-29,]),'VAR':([4,16,86,],[9,9,9,]),'COMMA':([17,18,45,],[24,-66,-67,]),'LPAREN':([21,22,35,37,39,41,42,46,47,51,55,63,68,69,70,71,72,73,74,75,76,77,80,110,],[44,-15,-43,55,59,62,63,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'END':([26,27,28,29,30,31,32,33,34,40,50,52,53,54,56,57,60,61,65,67,78,81,82,83,87,88,95,96,97,98,99,101,102,103,106,109,111,113,114,115,116,117,118,119,120,121,],[-19,-20,-21,-22,-23,-24,-25,-26,-27,-47,-54,-58,-61,-62,-64,-65,82,-18,-28,-47,-55,-42,-44,-47,-31,-39,-56,-57,-59,-60,-63,-17,-45,-46,-32,-47,-35,-33,-47,-38,-40,-36,-47,-34,-37,-29,]),'ELSE':([26,27,28,29,30,31,32,33,34,50,52,53,54,56,57,65,67,78,81,82,87,88,95,96,97,98,99,102,103,106,109,111,113,114,115,116,117,118,119,120,121,],[-19,-20,-21,-22,-23,-24,-25,-26,-27,-54,-58,-61,-62,-64,-65,-28,-47,-55,-42,-44,-31,-39,-56,-57,-59,-60,-63,-45,-46,-32,-47,-35,-33,-47,118,-40,-36,-47,-34,-37,-29,]),'ASSIGN':([35,58,],[46,80,]),'MINUS':([37,46,47,49,50,52,53,54,55,56,57,63,65,68,69,70,71,72,73,78,79,80,85,89,90,91,92,93,94,95,96,97,98,99,100,110,112,],[51,51,51,75,-54,-58,-61,-62,51,-64,-65,51,75,51,51,51,51,51,51,-55,75,51,75,75,75,75,75,75,75,-56,-57,-59,-60,-63,75,51,75,]),'NUMBER':([37,46,47,51,55,63,68,69,70,71,72,73,74,75,76,77,80,110,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'RPAREN':([44,50,52,53,54,56,57,59,78,79,84,85,95,96,97,98,99,],[64,-54,-58,-61,-62,-64,-65,81,-55,99,102,103,-56,-57,-59,-60,-63,]),'DO':([48,50,52,53,54,56,57,78,89,90,91,92,93,94,95,96,97,98,99,112,],[67,-54,-58,-61,-62,-64,-65,-55,-48,-49,-50,-51,-52,-53,-56,-57,-59,-60,-63,114,]),'EQ':([49,50,52,53,54,56,57,78,95,96,97,98,99,],[68,-54,-58,-61,-62,-64,-65,-55,-56,-57,-59,-60,-63,]),'NEQ':([49,50,52,53,54,56,57,78,95,96,97,98,99,],[69,-54,-58,-61,-62,-64,-65,-55,-56,-57,-59,-60,-63,]),'LT':([49,50,52,53,54,56,57,78,95,96,97,98,99,],[70,-54,-58,-61,-62,-64,-65,-55,-56,-57,-59,-60,-63,]),'LE':([49,50,52,53,54,56,57,78,95,96,97,98,99,],[71,-54,-58,-61,-62,-64,-65,-55,-56,-57,-59,-60,-63,]),'GT':([49,50,52,53,54,56,57,78,95,96,97,98,99,],[72,-54,-58,-61,-62,-64,-65,-55,-56,-57,-59,-60,-63,]),'GE':([49,50,52,53,54,56,57,78,95,96,97,98,99,],[73,-54,-58,-61,-62,-64,-65,-55,-56,-57,-59,-60,-63,]),'PLUS':([49,50,52,53,54,56,57,65,78,79,85,89,90,91,92,93,94,95,96,97,98,99,100,112,],[74,-54,-58,-61,-62,-64,-65,74,-55,74,74,74,74,74,74,74,74,-56,-57,-59,-60,-63,74,74,]),'THEN':([50,52,53,54,56,57,66,78,89,90,91,92,93,94,95,96,97,98,99,],[-54,-58,-61,-62,-64,-65,87,-55,-48,-49,-50,-51,-52,-53,-56,-57,-59,-60,-63,]),'TO':([50,52,53,54,56,57,78,95,96,97,98,99,100,107,],[-54,-58,-61,-62,-64,-65,-55,-56,-57,-59,-60,-63,-41,110,]),'MULT':([50,52,53,54,56,57,78,95,96,97,98,99,],[76,-58,-61,-62,-64,-65,76,76,76,-59,-60,-63,]),'DIV':([50,52,53,54,56,57,78,95,96,97,98,99,],[77,-58,-61,-62,-64,-65,77,77,77,-59,-60,-63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'outblock':([4,],[5,]),'var_decl_part':([4,86,],[6,105,]),'var_decl_list':([4,86,],[7,7,]),'var_decl':([4,16,86,],[8,23,8,]),'subprog_decl_part':([6,],[11,]),'subprog_decl_list':([6,],[12,]),'subprog_decl':([6,20,],[13,43,]),'proc_decl':([6,20,],[14,14,]),'id_list':([9,],[17,]),'outblock_act':([11,],[19,]),'proc_name':([15,],[21,]),'statement':([19,40,67,83,105,109,114,118,],[25,61,88,101,108,111,116,120,]),'assignment_statement':([19,40,67,83,105,109,114,118,],[26,26,26,26,26,26,26,26,]),'if_statement':([19,40,67,83,105,109,114,118,],[27,27,27,27,27,27,27,27,]),'while_statement':([19,40,67,83,105,109,114,118,],[28,28,28,28,28,28,28,28,]),'for_statement':([19,40,67,83,105,109,114,118,],[29,29,29,29,29,29,29,29,]),'proc_call_statement':([19,40,67,83,105,109,114,118,],[30,30,30,30,30,30,30,30,]),'null_statement':([19,40,67,83,105,109,114,118,],[31,31,31,31,31,31,31,31,]),'block_statement':([19,40,67,83,105,109,114,118,],[32,32,32,32,32,32,32,32,]),'read_statement':([19,40,67,83,105,109,114,118,],[33,33,33,33,33,33,33,33,]),'write_statement':([19,40,67,83,105,109,114,118,],[34,34,34,34,34,34,34,34,]),'act_generate_labels':([19,40,67,83,105,109,114,118,],[36,36,36,36,36,36,36,36,]),'proc_call_name':([19,40,67,83,105,109,114,118,],[39,39,39,39,39,39,39,39,]),'condition':([37,47,],[48,66,]),'expression':([37,46,47,55,63,68,69,70,71,72,73,80,110,],[49,65,49,79,85,89,90,91,92,93,94,100,112,]),'term':([37,46,47,51,55,63,68,69,70,71,72,73,74,75,80,110,],[50,50,50,78,50,50,50,50,50,50,50,50,95,96,50,50,]),'factor':([37,46,47,51,55,63,68,69,70,71,72,73,74,75,76,77,80,110,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,97,98,52,52,]),'var_name':([37,46,47,51,55,63,68,69,70,71,72,73,74,75,76,77,80,110,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'number':([37,46,47,51,55,63,68,69,70,71,72,73,74,75,76,77,80,110,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'statement_list':([40,],[60,]),'inblock':([86,],[104,]),'act_insert_br':([87,],[106,]),'for_act1':([100,],[107,]),'act_insert_label1':([106,],[109,]),'act_insert_jump1':([111,],[113,]),'act_insert_label2':([113,],[115,]),'else_statement':([115,],[117,]),'act_insert_jump2':([117,],[119,]),'act_insert_label3':([119,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENT SEMICOLON outblock PERIOD','program',5,'p_program','compiler.py',129),
  ('outblock -> var_decl_part subprog_decl_part outblock_act statement','outblock',4,'p_outblock','compiler.py',153),
  ('outblock_act -> <empty>','outblock_act',0,'p_outblock_act','compiler.py',162),
  ('var_decl_part -> var_decl_list SEMICOLON','var_decl_part',2,'p_var_decl_part','compiler.py',170),
  ('var_decl_part -> <empty>','var_decl_part',0,'p_var_decl_part','compiler.py',171),
  ('var_decl_list -> var_decl_list SEMICOLON var_decl','var_decl_list',3,'p_var_decl_list','compiler.py',175),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','compiler.py',176),
  ('var_decl -> VAR id_list','var_decl',2,'p_var_decl','compiler.py',180),
  ('subprog_decl_part -> subprog_decl_list SEMICOLON','subprog_decl_part',2,'p_subprog_decl_part','compiler.py',185),
  ('subprog_decl_part -> <empty>','subprog_decl_part',0,'p_subprog_decl_part','compiler.py',186),
  ('subprog_decl_list -> subprog_decl_list SEMICOLON subprog_decl','subprog_decl_list',3,'p_subprog_decl_list','compiler.py',190),
  ('subprog_decl_list -> subprog_decl','subprog_decl_list',1,'p_subprog_decl_list','compiler.py',191),
  ('subprog_decl -> proc_decl','subprog_decl',1,'p_subprog_decl','compiler.py',196),
  ('proc_decl -> PROCEDURE proc_name LPAREN RPAREN SEMICOLON inblock','proc_decl',6,'p_proc_decl','compiler.py',201),
  ('proc_name -> IDENT','proc_name',1,'p_proc_name','compiler.py',207),
  ('inblock -> var_decl_part statement','inblock',2,'p_inblock','compiler.py',215),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','compiler.py',221),
  ('statement_list -> statement','statement_list',1,'p_statement_list','compiler.py',222),
  ('statement -> assignment_statement','statement',1,'p_statement','compiler.py',225),
  ('statement -> if_statement','statement',1,'p_statement','compiler.py',226),
  ('statement -> while_statement','statement',1,'p_statement','compiler.py',227),
  ('statement -> for_statement','statement',1,'p_statement','compiler.py',228),
  ('statement -> proc_call_statement','statement',1,'p_statement','compiler.py',229),
  ('statement -> null_statement','statement',1,'p_statement','compiler.py',230),
  ('statement -> block_statement','statement',1,'p_statement','compiler.py',231),
  ('statement -> read_statement','statement',1,'p_statement','compiler.py',232),
  ('statement -> write_statement','statement',1,'p_statement','compiler.py',233),
  ('assignment_statement -> IDENT ASSIGN expression','assignment_statement',3,'p_assignment_statement','compiler.py',236),
  ('if_statement -> act_generate_labels IF condition THEN act_insert_br act_insert_label1 statement act_insert_jump1 act_insert_label2 else_statement act_insert_jump2 act_insert_label3','if_statement',12,'p_if_statement','compiler.py',243),
  ('act_generate_labels -> <empty>','act_generate_labels',0,'p_act_generate_labels','compiler.py',246),
  ('act_insert_br -> <empty>','act_insert_br',0,'p_act_insert_br','compiler.py',253),
  ('act_insert_label1 -> <empty>','act_insert_label1',0,'p_act_insert_label1','compiler.py',257),
  ('act_insert_label2 -> <empty>','act_insert_label2',0,'p_act_insert_label2','compiler.py',262),
  ('act_insert_label3 -> <empty>','act_insert_label3',0,'p_act_insert_label3','compiler.py',267),
  ('act_insert_jump1 -> <empty>','act_insert_jump1',0,'p_act_insert_jump1','compiler.py',272),
  ('act_insert_jump2 -> <empty>','act_insert_jump2',0,'p_act_insert_jump2','compiler.py',276),
  ('else_statement -> ELSE statement','else_statement',2,'p_else_statement','compiler.py',282),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','compiler.py',283),
  ('while_statement -> WHILE condition DO statement','while_statement',4,'p_while_statement','compiler.py',287),
  ('for_statement -> FOR IDENT ASSIGN expression for_act1 TO expression DO statement','for_statement',9,'p_for_statement','compiler.py',291),
  ('for_act1 -> <empty>','for_act1',0,'p_for_act1','compiler.py',294),
  ('proc_call_statement -> proc_call_name LPAREN RPAREN','proc_call_statement',3,'p_proc_call_statement','compiler.py',299),
  ('proc_call_name -> IDENT','proc_call_name',1,'p_proc_call_name','compiler.py',303),
  ('block_statement -> BEGIN statement_list END','block_statement',3,'p_block_statement','compiler.py',308),
  ('read_statement -> READ LPAREN IDENT RPAREN','read_statement',4,'p_read_statement','compiler.py',314),
  ('write_statement -> WRITE LPAREN expression RPAREN','write_statement',4,'p_write_statement','compiler.py',327),
  ('null_statement -> <empty>','null_statement',0,'p_null_statement','compiler.py',335),
  ('condition -> expression EQ expression','condition',3,'p_condition','compiler.py',338),
  ('condition -> expression NEQ expression','condition',3,'p_condition','compiler.py',339),
  ('condition -> expression LT expression','condition',3,'p_condition','compiler.py',340),
  ('condition -> expression LE expression','condition',3,'p_condition','compiler.py',341),
  ('condition -> expression GT expression','condition',3,'p_condition','compiler.py',342),
  ('condition -> expression GE expression','condition',3,'p_condition','compiler.py',343),
  ('expression -> term','expression',1,'p_expression','compiler.py',350),
  ('expression -> MINUS term','expression',2,'p_expression','compiler.py',351),
  ('expression -> expression PLUS term','expression',3,'p_expression','compiler.py',352),
  ('expression -> expression MINUS term','expression',3,'p_expression','compiler.py',353),
  ('term -> factor','term',1,'p_term','compiler.py',379),
  ('term -> term MULT factor','term',3,'p_term','compiler.py',380),
  ('term -> term DIV factor','term',3,'p_term','compiler.py',381),
  ('factor -> var_name','factor',1,'p_factor','compiler.py',403),
  ('factor -> number','factor',1,'p_factor','compiler.py',404),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','compiler.py',405),
  ('var_name -> IDENT','var_name',1,'p_var_name','compiler.py',414),
  ('number -> NUMBER','number',1,'p_number','compiler.py',426),
  ('id_list -> IDENT','id_list',1,'p_id_list','compiler.py',431),
  ('id_list -> id_list COMMA IDENT','id_list',3,'p_id_list','compiler.py',432),
]
